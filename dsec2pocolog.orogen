name "dsec2pocolog"
# Optionally declare the version number
# version "0.1"

# If new data types need to be defined, they have to be put in a separate C++
# header, and this header will be loaded here
import_types_from "dsec2pocologTypes.hpp"

# Finally, it is pretty common that headers are directly loaded from an external
# library. In this case, the library must be first used (the name is the
# library's pkg-config name) and then the header can be used. Following Rock
# conventions, a common use-case would be:
using_library "blosc" # BLOSC
using_library "yaml-cpp" # yaml
using_library "frame_helper" # Image Frames

# using_library "dsec2pocolog"
# import_types_from "dsec2pocolog/CustomType.hpp"

# If this project uses data types that are defined in other oroGen projects,
# these projects should be imported there as well.
import_types_from "std"
import_types_from "base"

# Declare a new task context (i.e., a component)
#
# The corresponding C++ class can be edited in tasks/Task.hpp and
# tasks/Task.cpp, and will be put in the dsec2pocolog namespace.
task_context "Task" do
    # This is the default from now on, and should not be removed. Rock will
    # transition to a setup where all components use a configuration step.
    needs_configuration

    #***************************
    #**** Driver Properties ****
    #***************************
    property "config", "dsec2pocolog::Config"

    #******************************
    #******* Output Ports *********
    #******************************
    output_port('imu', '/base/samples/IMUSensors').
        doc 'provides timestamped inertial samples containing the calibrated sensor readings.'

    output_port('events', 'base::samples::EventArray').
        doc 'array of events'

    output_port('frame', ro_ptr('base::samples::frame::Frame')).
        doc 'RGB Image frame'

    output_port('depth_img', ro_ptr('base::samples::frame::Frame')).
        doc 'Depthmap in the RGB camera'

    output_port('depth_events', ro_ptr('base::samples::frame::Frame')).
        doc 'Depthmap in the event camera'

    fd_driven
end

task_context "Viz" do
    # This is the default from now on, and should not be removed. Rock will
    # transition to a setup where all components use a configuration step.
    needs_configuration

    #***************************
    #**** Driver Properties ****
    #***************************
    property "calib_file", "std::string"

    #******************************
    #******* Input Ports *********
    #******************************
    output_port('events', 'base::samples::EventArray').
        doc 'array of events'

    output_port('img', ro_ptr('base::samples::frame::Frame')).
        doc 'RGB Image frame'

    #******************************
    #******* Input Ports *********
    #******************************
    input_port('frame', ro_ptr('base::samples::frame::Frame')).
        doc 'RGB + Events Image frame'

    port_driven
end

